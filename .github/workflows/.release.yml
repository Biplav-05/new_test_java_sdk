name: Release & Publish to Maven Central

on:
  workflow_dispatch:
    inputs:
      release-type:
        description: 'Specify release type: regular, alpha, beta, or rc'
        required: true
        default: 'regular'

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      RELEASE_TYPE: ${{ github.event.inputs.release-type }}

    steps:
      # Check if the workflow is running on the main branch
      - name: Validate branch
        run: |
          if [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
            echo "Error: This workflow can only be run on the main branch."
            exit 1
          fi

      # Validate the release type
      - name: Validate release type
        run: |
          if [[ "$RELEASE_TYPE" != "regular" && "$RELEASE_TYPE" != "alpha" && "$RELEASE_TYPE" != "beta" && "$RELEASE_TYPE" != "rc" ]]; then
            echo "Error: Invalid release type '$RELEASE_TYPE'. It must be one of: regular, alpha, beta, or rc."
            exit 1
          fi

      # Checkout the code from the repository
      - name: Checkout source code
        uses: actions/checkout@v3

      # Setup Java environment
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      # Setup Maven environment
      - name: Setup Maven
        uses: actions/setup-maven@v2
        with:
          maven-version: '3.8.7' # Use the Maven version you want

      # Install Node.js dependencies (if applicable)
      - name: Install Node.js dependencies
        run: npm ci

      # Configure Git user information
      - name: Set Git user
        run: |
          git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"
          git config --global user.name "${{ secrets.GIT_USER_NAME }}"

      # Create settings.xml for Maven
      - name: Create settings.xml
        run: |
          mkdir -p ~/.m2
          echo "<settings xmlns='http://maven.apache.org/SETTINGS/1.0.0'
                xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
                xsi:schemaLocation='http://mavensite.org/xsd/settings-1.0.0.xsd'>
            <servers>
              <server>
                <id>ossrh</id>
                <username>${{ secrets.SONATYPE_USERNAME }}</username>
                <password>${{ secrets.SONATYPE_PASSWORD }}</password>
              </server>
            </servers>
            <profiles>
              <profile>
                <id>central</id>
                <activation>
                  <activeByDefault>true</activeByDefault>
                </activation>
                <properties>
                  <gpg.executable>gpg</gpg.executable>
                  <gpg.passphrase>${{ secrets.GPG_PASSPHRASE }}</gpg.passphrase>
                </properties>
              </profile>
            </profiles>
          </settings>" > ~/.m2/settings.xml

      # Set up the GPG key for signing
      - name: Set up GPG key
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}  # Use the secret here
        run: |
          # Create the GPG directory with secure permissions
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
          
          # Import the private key
          echo "$GPG_PRIVATE_KEY" | gpg --import --batch --yes

          # Trust the GPG key using the secret key ID
          echo -e "5\n" | gpg --batch --yes --pinentry-mode loopback --passphrase "$PASSPHRASE" --command-fd 0 --edit-key "$GPG_KEY_ID" trust quit

      # Run Maven to build and publish
      - name: Run Maven deploy
        run: mvn clean deploy -DskipTests
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}  # If needed for GitHub access
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}

      # Print a success message if the release was successful
      - name: Print success message
        if: success()
        run: echo "Release and publishing completed successfully!"

      # Print a failure message if the release failed
      - name: Handle failure
        if: failure()
        run: echo "Release process failed."
